[
    {
        "srno":"11",
        "title":"Create Two Table",
        "question":[
            "Table1: Person",
            "+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\n\n",
            "personId is the primary key (column with unique values) for this table.",
            "This table contains information about the ID of some persons and their first and last names.",
            "Table2: Address",
            "+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\n\n",
            "addressId is the primary key (column with unique values) for this table.",
            "Each row of this table contains information about the city and state of one person with ID = PersonId."
        ],
        "input":[],
        "output":[
            "Person table:",
            "\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+",
            "Address table:",
            "\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+",
            "         ",
            "Note First Print the Preson Table Then Address"
        ],
        "answer":"1|Wang|Allen\n2|Alice|Bob\n1|2|New York City|New York\n2|3|Leetcode|California\n",
        "advance":""
    },
    {
        "srno":"12",
        "title":"Recyclable and Low Fat Products",
        "question":[
            "Table: Products\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| low_fats    | enum    |\n| recyclable  | enum    |\n+-------------+---------+\n\nlow_fats is an ENUM (category) of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.\n \n\n",
            "recyclable is an ENUM (category) of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.",
            "Write a solution to find the ids of products that are both low fat and recyclable.\n\nReturn the result table .\n\nThe result format is in the following example.",
            "product_id is the primary key (column with unique values) for this table."
        ],
        "input":[
            "Products table:",
            "\n+-------------+----------+------------+\n| product_id  | low_fats | recyclable |\n+-------------+----------+------------+\n| 0           | Y        | N          |\n| 1           | Y        | Y          |\n| 2           | N        | Y          |\n| 3           | Y        | Y          |\n| 4           | N        | N          |\n+-------------+----------+------------+",
            "No Need to write query for this table"
        ],
        "output":[
            "Ouput table:\n+-------------+\n| product_id  |\n+-------------+\n| 1           |\n| 3           |\n+-------------+"
        ],
        "answer":"1\n3\n",
        "advance":"-- Create table if not exists Products\nCREATE TABLE Products (\n    product_id NUMBER,\n    low_fats varchar,\n    recyclable varchar\n);\n\n-- Insert data into Products\nINSERT INTO Products (product_id, low_fats, recyclable) VALUES (0, 'Y', 'N');\nINSERT INTO Products (product_id, low_fats, recyclable) VALUES (1, 'Y', 'Y');\nINSERT INTO Products (product_id, low_fats, recyclable) VALUES (2, 'N', 'Y');\nINSERT INTO Products (product_id, low_fats, recyclable) VALUES (3, 'Y', 'Y');\nINSERT INTO Products (product_id, low_fats, recyclable) VALUES (4, 'N', 'N');\n\n"
    },
    {
        "srno":"13",
        "title":"Swap Salary",
        "question":[
            "Table: Salary",
            "+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| name        | varchar  |\n| sex         | ENUM     |\n| salary      | int      |\n+-------------+----------+",
            "id is the primary key (column with unique values) for this table.\nThe sex column is ENUM (category) value of type ('m', 'f').",
            "The table contains information about an employee.",
            "Write a solution to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.",
            "Note that you must write a single update statement, do write select statement for this problem."
        ],
        "input":[
            "Salary table:",
            "+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n+----+------+-----+--------+",
            "No Need to write query for this table"
        ],
        "output":[
            "+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n+----+------+-----+--------+",
            "Explanation: \n(1, A) and (3, C) were changed from 'm' to 'f'.\n(2, B) and (4, D) were changed from 'f' to 'm'."
        ],
        "answer":"1|A|f|2500\n2|B|m|1500\n3|C|f|5500\n4|D|m|500\n",
        "advance":"-- Create table if not exists Salary\nCREATE TABLE Salary (\n    id NUMBER,\n    name VARCHAR2(100),\n    sex CHAR(1),\n    salary NUMBER\n);\n\n-- Insert data into Salary\nINSERT INTO Salary (id, name, sex, salary) VALUES (1, 'A', 'm', 2500);\nINSERT INTO Salary (id, name, sex, salary) VALUES (2, 'B', 'f', 1500);\nINSERT INTO Salary (id, name, sex, salary) VALUES (3, 'C', 'm', 5500);\nINSERT INTO Salary (id, name, sex, salary) VALUES (4, 'D', 'f', 500);\n\n"
    },
    {
        "srno":"14",
        "title":"Find Followers Count",
        "question":[
            "Table: Followers",
            "+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user_id     | int  |\n| follower_id | int  |\n+-------------+------+",
            "(user_id, follower_id) is the primary key (combination of columns with unique values) for this table.",
            "This table contains the IDs of a user and a follower in a social media app where the follower follows the user.",
            "Write a solution that will, for each user, return the number of followers.",
            "Return the result table ordered by user_id in ascending order.",
            "The result format is in the following example."
        ],
        "input":[
            "Followers table:",
            "+---------+-------------+\n| user_id | follower_id |\n+---------+-------------+\n| 0       | 1           |\n| 1       | 0           |\n| 2       | 0           |\n| 2       | 1           |\n+---------+-------------+",
            "No Need to write query for this table"
        ],
        "output":[
            "+---------+----------------+\n| user_id | followers_count|\n+---------+----------------+\n| 0       | 1              |\n| 1       | 1              |\n| 2       | 2              |\n+---------+----------------+",
            "Explanation: \nThe followers of 0 are {1}\nThe followers of 1 are {0}\nThe followers of 2 are {0,1}"
        ],
        "answer":"0|1\n1|1\n2|2\n",
        "advance":"-- Create table if not exists Followers\nCREATE TABLE Followers (\n    user_id NUMBER,\n    follower_id NUMBER\n);\n\n\n-- Insert data into Followers\nINSERT INTO Followers (user_id, follower_id) VALUES (0, 1);\nINSERT INTO Followers (user_id, follower_id) VALUES (1, 0);\nINSERT INTO Followers (user_id, follower_id) VALUES (2, 0);\nINSERT INTO Followers (user_id, follower_id) VALUES (2, 1);\n\n"
    },
    {
        "srno":"15",
        "title":"Employees-earning-more-than-their-managers",
        "question":[
            "Table: Employee",
            "+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+",
            "id is the primary key (column with unique values) for this table.",
            "Each row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.",
            "Write a solution to find the employees who earn more than their managers.",
            "Return the result table ",
            "The result format is in the following example."
        ],
        "input":[
            "Employee table:",
            "+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+",
            "No Need to write query for this table"
        ],
        "output":[
            "+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+",
            "Explanation: Joe is the only employee who earns more than his manager."
        ],
        "answer":"Joe\n",
        "advance":"CREATE TABLE Employee (\n    id NUMBER,\n    name VARCHAR2(255),\n    salary NUMBER,\n    managerId NUMBER\n);\n\n-- Insert data into Employee\nINSERT INTO Employee (id, name, salary, managerId) VALUES (1, 'Joe', 70000, 3);\nINSERT INTO Employee (id, name, salary, managerId) VALUES (2, 'Henry', 80000, 4);\nINSERT INTO Employee (id, name, salary, managerId) VALUES (3, 'Sam', 60000, NULL);\nINSERT INTO Employee (id, name, salary, managerId) VALUES (4, 'Max', 90000, NULL);\n\n"
    }
]