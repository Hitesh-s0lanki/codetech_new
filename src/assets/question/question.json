[
    {
        "srno":"1",
        "title":"Number of Words Found in Sentences",
        "description":"A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\nYou are given strings sentences, where  sentences represents a single sentence. \n\nReturn the  number of words that appear in a single sentence.",
        "status":"Not Solved",
        "marks":"10",
        "case1":"alice and bob love leetcode",
        "case2":"this is great thanks very much",
        "expected1":"5",
        "expected2":"6",
        "InputName":"sentence = ",
        "Constraints":["0 <= sentence.length <= 100","sentence consists only of lowercase English letters and ' ' only.","sentence does not have leading or trailing spaces","All the words in sentence are separated by a single space."],
        "Cpp":"int mostWordsFound(string sentence) {\n\n}",
        "Java":"class Solution {\n    public int mostWordsFound(String sentence) {\n        \n     }\n}"   ,
        "Python":"def mostWordsFound(sentence):\n",
        "C":"int mostWordsFound(char* sentence){\n\n}",
        "Javascript":"const mostWordsFound = (sentence) => {\n\n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main() {vector<string> val={\"alice and bob love leetcode\",\"this is great thanks very much\"};for(int i=0;i<2;i++){cout<<mostWordsFound(val[i])<<endl;}return 0;}",
        "CMain":"int main(){\n    char *ch[] = {\"alice and bob love leetcode\", \n    \"this is great thanks very much\"} ;\n    for (int i = 0; i < 2; i++)\n    {\n        printf(\"%d\\n\",mostWordsFound(ch[i]));\n    }\n}",
        "PythonMain":"\nsentence = [\"alice and bob love leetcode\",\"this is great thanks very much\"]\nfor i in sentence:\n    print(mostWordsFound(i))",
        "JavascriptMain":"\nlet sentence = [\"alice and bob love leetcode\",\"this is great thanks very much\"]\nfor (let i of sentence){\n    console.log(mostWordsFound(i))\n}",
        "JavaMain":"\n        Solution s = new Solution();\n\n        String[] val = {\"alice and bob love leetcode\",\"this is great thanks very much\"};\n\n        for(int i = 0; i < 2; i++){\n            System.out.println(s.mostWordsFound(val[i]));\n        }\n        \n    }\n}",
        "JavascriptSubmit":"let sentence = [\"alice and bob love leetcode\", \n\"this is great thanks very much\",\n\"His gaze traveled the length of the glowing forest to the walls and settled in the direction of the magic Springs.\",  \n\"Showering and dressing in jeans and a waist length blouse, she was in the Kitchen by the time Katie got up.\",\n\"Hildebrand, now pope as Gregory VII., next summoned him to Rome, and, in a synod held there in 1078, tried once more to obtain a declaration of his orthodoxy by means of a confession of faith drawn up in general terms; but even this strong-minded and strong-willed pontiff was at length forced to yield to the demands of the multitude and its leaders; and in another synod at Rome (1079), finding that he was only endangering his own position and reputation, he turned unexpectedly upon Berengar and commanded him to confess that he had erred in not teaching a change as to substantial reality of the sacramental bread and wine into the body and blood of Christ.\",\n\"At length, as I leaned with my elbow on the bench one day, it ran up my clothes, and along my sleeve, and round and round the paper which held my dinner, while I kept the latter close, and dodged and played at bopeep with it; and when at last I held still a piece of cheese between my thumb and finger, it came and nibbled it, sitting in my hand, and afterward cleaned its face and paws, like a fly, and walked away.\",\n\"\",\n\"The length of telegraph lines in use is 46,300 m., and the length of wire nearly three times that distance.\",\n\"Hello\",\n\"Beneath the epidermis is a longitudinal layer of muscle-fibres which are separated into four distinct groups by the dorsal, ventral and lateral areas; these are occupied by a continuation of the epidermic layer; in the lateral areas run two thin-walled tubes with clear contents, which unite in the anterior part of the body and open by a pore situated on the ventral surface usually about a quarter or a third of the body length from the anterior end.\"]\nlet ans = [5,6,21,21,117,84,0,20,1,78]\nlet cnt = 0\nfor (let i = 0 ; i < sentence.length ; i++){\n    try{\n        if(mostWordsFound(sentence[i]) === ans[i]){\n            cnt++\n        }\n    }catch(err){}\n}\nconsole.log(cnt)",
        "PythonSubmit":"\nsentence = [\"alice and bob love leetcode\", \n    \"this is great thanks very much\",\n    \"His gaze traveled the length of the glowing forest to the walls and settled in the direction of the magic Springs.\",  \n    \"Showering and dressing in jeans and a waist length blouse, she was in the Kitchen by the time Katie got up.\",\n    \"Hildebrand, now pope as Gregory VII., next summoned him to Rome, and, in a synod held there in 1078, tried once more to obtain a declaration of his orthodoxy by means of a confession of faith drawn up in general terms; but even this strong-minded and strong-willed pontiff was at length forced to yield to the demands of the multitude and its leaders; and in another synod at Rome (1079), finding that he was only endangering his own position and reputation, he turned unexpectedly upon Berengar and commanded him to confess that he had erred in not teaching a change as to substantial reality of the sacramental bread and wine into the body and blood of Christ.\",\n    \"At length, as I leaned with my elbow on the bench one day, it ran up my clothes, and along my sleeve, and round and round the paper which held my dinner, while I kept the latter close, and dodged and played at bopeep with it; and when at last I held still a piece of cheese between my thumb and finger, it came and nibbled it, sitting in my hand, and afterward cleaned its face and paws, like a fly, and walked away.\",\n    \"\",\n    \"The length of telegraph lines in use is 46,300 m., and the length of wire nearly three times that distance.\",\n    \"Hello\",\n    \"Beneath the epidermis is a longitudinal layer of muscle-fibres which are separated into four distinct groups by the dorsal, ventral and lateral areas; these are occupied by a continuation of the epidermic layer; in the lateral areas run two thin-walled tubes with clear contents, which unite in the anterior part of the body and open by a pore situated on the ventral surface usually about a quarter or a third of the body length from the anterior end.\"]\nans = [5,6,21,21,117,84,0,20,1,78]\ncnt = 0\nfor i in range(len(sentence)):\n    try:\n        if mostWordsFound(sentence[i]) == ans[i]:\n            cnt += 1\n    except:\n        pass\nprint(cnt)",
        "CSubmit":"int main(){\n    int ans[] = {5,6,21,21,117,84,0,20,1,78};\n    char *ch[] = {\"alice and bob love leetcode\", \n    \"this is great thanks very much\",\n    \"His gaze traveled the length of the glowing forest to the walls and settled in the direction of the magic Springs.\",  \n    \"Showering and dressing in jeans and a waist length blouse, she was in the Kitchen by the time Katie got up.\",\n    \"Hildebrand, now pope as Gregory VII., next summoned him to Rome, and, in a synod held there in 1078, tried once more to obtain a declaration of his orthodoxy by means of a confession of faith drawn up in general terms; but even this strong-minded and strong-willed pontiff was at length forced to yield to the demands of the multitude and its leaders; and in another synod at Rome (1079), finding that he was only endangering his own position and reputation, he turned unexpectedly upon Berengar and commanded him to confess that he had erred in not teaching a change as to substantial reality of the sacramental bread and wine into the body and blood of Christ.\",\n    \"At length, as I leaned with my elbow on the bench one day, it ran up my clothes, and along my sleeve, and round and round the paper which held my dinner, while I kept the latter close, and dodged and played at bopeep with it; and when at last I held still a piece of cheese between my thumb and finger, it came and nibbled it, sitting in my hand, and afterward cleaned its face and paws, like a fly, and walked away.\",\n    \"\",\n    \"The length of telegraph lines in use is 46,300 m., and the length of wire nearly three times that distance.\",\n    \"Hello\",\n    \"Beneath the epidermis is a longitudinal layer of muscle-fibres which are separated into four distinct groups by the dorsal, ventral and lateral areas; these are occupied by a continuation of the epidermic layer; in the lateral areas run two thin-walled tubes with clear contents, which unite in the anterior part of the body and open by a pore situated on the ventral surface usually about a quarter or a third of the body length from the anterior end.\"} ;\n    int cnt = 0;\n    for (int i = 0; i < 10; i++){\n        if(\"%d\\n\",mostWordsFound(ch[i]) == ans[i])\n            cnt++;\n    }\n    printf(\"%d\",cnt);\n}",
        "CppSubmit":"int main()\n{\n    vector<int> ans = {5,6,21,21,117,84,0,20,1,78};\n    vector<string> val = {\n    \"alice and bob love leetcode\", \n    \"this is great thanks very much\",\n    \"His gaze traveled the length of the glowing forest to the walls and settled in the direction of the magic Springs.\",  \n    \"Showering and dressing in jeans and a waist length blouse, she was in the Kitchen by the time Katie got up.\",\n    \"Hildebrand, now pope as Gregory VII., next summoned him to Rome, and, in a synod held there in 1078, tried once more to obtain a declaration of his orthodoxy by means of a confession of faith drawn up in general terms; but even this strong-minded and strong-willed pontiff was at length forced to yield to the demands of the multitude and its leaders; and in another synod at Rome (1079), finding that he was only endangering his own position and reputation, he turned unexpectedly upon Berengar and commanded him to confess that he had erred in not teaching a change as to substantial reality of the sacramental bread and wine into the body and blood of Christ.\",\n    \"At length, as I leaned with my elbow on the bench one day, it ran up my clothes, and along my sleeve, and round and round the paper which held my dinner, while I kept the latter close, and dodged and played at bopeep with it; and when at last I held still a piece of cheese between my thumb and finger, it came and nibbled it, sitting in my hand, and afterward cleaned its face and paws, like a fly, and walked away.\",\n    \"\",\n    \"The length of telegraph lines in use is 46,300 m., and the length of wire nearly three times that distance.\",\n    \"Hello\",\n    \"Beneath the epidermis is a longitudinal layer of muscle-fibres which are separated into four distinct groups by the dorsal, ventral and lateral areas; these are occupied by a continuation of the epidermic layer; in the lateral areas run two thin-walled tubes with clear contents, which unite in the anterior part of the body and open by a pore situated on the ventral surface usually about a quarter or a third of the body length from the anterior end.\"};\n    int count = 0;\n    for (int i = 0; i < val.size(); i++)\n    {\n        try\n        {\n            if( mostWordsFound(val[i])  == ans[i] ){\n                count ++;\n            }\n        }\n        catch(const std::exception& e)\n        {\n            \n        }\n    }\n    cout<<count;\n\n    return 0;\n}"
    },
    {
        "srno":"2",
        "title":"Concatenation of Array",
        "description":"Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).\n\nSpecifically, ans is the concatenation of two nums arrays.\n\nReturn the array ans \n\n .                                                                                                            Explanation:\n The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]",
        "status":"Not Solved",
        "marks":"10",
        "case1":"[1,2,1]",
        "case2":"[1,3,2,1]",
        "expected1":"[1,2,1,1,2,1]",
        "expected2":"[1,3,2,1,1,3,2,1]",
        "InputName":"nums = ",
        "Constraints":["n == nums.length' ' only.","1 <= n <= 1000","1 <= nums[i] <= 1000"],
        "Cpp":"vector<int> getConcatenation(vector<int> &nums) {\n\n}",
        "Java":"class Solution {\n    public int[] getConcatenation(int[] nums,int n) {\n        \n     }\n}"   ,
        "Python":"def getConcatenation(nums):\n",
        "C":"int* getConcatenation(int* nums,int n,, int* returnSize){\n\n}",
        "Javascript":"const getConcatenation = (nums) => {\n\n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<vector<int>> val = {{1,2,1},{1,3,2,1}};\n\n    vector<vector<int>> ans = {getConcatenation(val[0]),getConcatenation(val[1])};\n    try{\n        for(auto i:ans){\n            string out = \"[\";\n            for(auto j:i){\n                out += to_string(j) + \",\";\n            }\n            out.pop_back();\n            out.push_back(']');\n            cout<<out<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}\n",
        "CMain":"int main() {\n    int val[2][4] = {{1, 2, 1}, {1, 3, 2, 1}};\n    int ans[2][100];\n\n    getConcatenation(val[0], 3, ans[0]);\n    getConcatenation(val[1], 4, ans[1]);\n\n    for (int i = 0; i < 2; i++) {\n        printf(\"[\");\n        for (int j = 0; j < (i == 0 ? 6 : 8); j++) {\n            printf(\"%d\", ans[i][j]);\n            if (j != (i == 0 ? 5 : 7)) {\n                printf(\",\");\n            }\n        }\n        printf(\"]\\n\");\n    }\n\n    return 0;\n}",
        "PythonMain":"\nval = [[1, 2, 1], [1, 3, 2, 1]]\n\nans = [getConcatenation(v) for v in val]\n\nfor i in ans:\n    out = \"[\" + \",\".join(map(str, i)) + \"]\"\n    print(out)",
        "JavascriptMain":"\nconst val = [[1, 2, 1], [1, 3, 2, 1]];\n\nconst ans = val.map(getConcatenation);\n\nans.forEach(i => {\n    const out = '[' + i.join(',') + ']';\n    console.log(out);\n});",
        "JavascriptSubmit":"const testCases = [\n    [1, 2, 3],\n    [4, 5, 6, 7],\n    [],\n    [8],\n    [0, 0, 0],\n    [9, 9, 9, 9, 9],\n    [2, 4, 6, 8],\n    [1, 3, 5],\n    [10, 20],\n    [7, 7, 7, 7, 7, 7, 7]\n];\n\nconst expectedOutputs = [\n    [1, 2, 3, 1, 2, 3],\n    [4, 5, 6, 7, 4, 5, 6, 7],\n    [],\n    [8, 8],\n    [0, 0, 0, 0, 0, 0],\n    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n    [2, 4, 6, 8, 2, 4, 6, 8],\n    [1, 3, 5, 1, 3, 5],\n    [10, 20, 10, 20],\n    [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\n];\n\nlet cnt = 0;\nfor (let i = 0; i < testCases.length; i++) {\n    try {\n        const ans = getConcatenation(testCases[i]);\n        if (JSON.stringify(ans) === JSON.stringify(expectedOutputs[i])) {\n            cnt++;\n        }\n    } catch (error) {\n        continue;\n    }\n}\n\nconsole.log(cnt);",
        "PythonSubmit":"\ntestCases = [\n    [1, 2, 3],\n    [4, 5, 6, 7],\n    [],\n    [8],\n    [0, 0, 0],\n    [9, 9, 9, 9, 9],\n    [2, 4, 6, 8],\n    [1, 3, 5],\n    [10, 20],\n    [7, 7, 7, 7, 7, 7, 7]\n]\n\nexpectedOutputs = [\n    [1, 2, 3, 1, 2, 3],\n    [4, 5, 6, 7, 4, 5, 6, 7],\n    [],\n    [8, 8],\n    [0, 0, 0, 0, 0, 0],\n    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n    [2, 4, 6, 8, 2, 4, 6, 8],\n    [1, 3, 5, 1, 3, 5],\n    [10, 20, 10, 20],\n    [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\n]\n\ncnt = 0\nfor i in range(len(testCases)):\n    try:\n        ans = getConcatenation(testCases[i])\n        if ans == expectedOutputs[i]:\n            cnt += 1\n    except:\n        continue\n\nprint(cnt)",
        "CSubmit":"",
        "CppSubmit":"int main() {\n    vector<vector<int>> testCases = {\n        {1, 2, 3},\n        {4, 5, 6, 7},\n        {},\n        {8},\n        {0, 0, 0},\n        {9, 9, 9, 9, 9},\n        {2, 4, 6, 8},\n        {1, 3, 5},\n        {10, 20},\n        {7, 7, 7, 7, 7, 7, 7}\n    };\n\n    vector<vector<int>> expectedOutputs = {\n        {1, 2, 3, 1, 2, 3},\n        {4, 5, 6, 7, 4, 5, 6, 7},\n        {},\n        {8, 8},\n        {0, 0, 0, 0, 0, 0},\n        {9, 9, 9, 9, 9, 9, 9, 9, 9, 9},\n        {2, 4, 6, 8, 2, 4, 6, 8},\n        {1, 3, 5, 1, 3, 5},\n        {10, 20, 10, 20},\n        {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7}\n    };\n    int cnt = 0;\n    for(int i = 0; i < testCases.size() ; i++){\n        try{\n            vector<int> ans = getConcatenation(testCases[i]);\n            if(ans == expectedOutputs[i]){\n                cnt++;\n            }\n        }catch(...){\n            continue;\n        }\n    }\n\n    cout<<cnt;\n    return 0;\n}"
    },
    {
        "srno":"3",
        "title":"Fizz Buzz",
        "status":"Not Solved",
        "marks":"10",
        "description":"Given an integer n, return a string array answer (1-indexed) where:\n\nanswer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\nanswer[i] == \"Fizz\" if i is divisible by 3.\nanswer[i] == \"Buzz\" if i is divisible by 5.\nanswer[i] == i (as a string) if none of the above conditions are true.",
        "case1":"3",
        "case2":"5",
        "expected1":"[1,2,Fizz]",
        "expected2":"[1,2,Fizz,4,Buzz]",
        "InputName":"n = ",
        "Constraints":["1 <= n <= 10^4"],
        "Cpp":"vector<string> fizzBuzz(int n) {\n        \n}",
        "Java":"class Solution {\n    public List<String> fizzBuzz(int n) {\n        \n    }\n}"  ,
        "Python":"def fizzBuzz(n):\n",
        "C":"char ** fizzBuzz(int n, int* returnSize){\n\n}",
        "Javascript":"var fizzBuzz = function(n) {\n    \n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<vector<string>> ans = {fizzBuzz(3),fizzBuzz(5)};\n    try{\n        for(auto i:ans){\n            string out = \"[\";\n            for(auto j:i){\n                out += j + \",\";\n            }\n            out.pop_back();\n            out.push_back(']');\n            cout<<out<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}",
        "CMain":"int main() {\n    int n[2] = {3,5};\n    int returnSize = 0;\n    for(int i = 0 ; i < 2;i++){\n        char** ans = fizzBuzz(n[i], &returnSize);\n        printf(\"[\");\n        for (int i = 0; i < returnSize; i++) {\n            printf(\"%s\", ans[i]);\n            if (i < returnSize - 1)\n                printf(\",\");\n        }\n        printf(\"]\");\n        printf(\"\\n\");\n\n        for (int i = 0; i < returnSize; i++) {\n            free(ans[i]);\n        }\n        free(ans);\n    }\n\n    return 0;\n}",
        "PythonMain":"\nans = [fizz_buzz(3), fizz_buzz(5)]\nfor i in ans:\n    out = \"[\" + \",\".join(i) + \"]\"\n    print(out)",
        "JavascriptMain":"const ans = [fizzBuzz(3), fizzBuzz(5)];\nans.forEach(i => {\n    const out = \"[\" + i.join(\", \") + \"]\";\n    console.log(out);\n});",
        "JavascriptSubmit":"const testCases = [[3, 5, 15, 7, 10, 20, 30, 50, 100, 150]];\nconst expectedOutputs = [\n    [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\", \"16\", \"17\", \"Fizz\", \"19\", \"Buzz\", \"Fizz\", \"22\", \"23\", \"Fizz\", \"Buzz\", \"26\", \"Fizz\", \"28\", \"29\", \"FizzBuzz\", \"31\", \"32\", \"Fizz\", \"34\", \"Buzz\", \"Fizz\", \"37\", \"38\", \"Fizz\", \"Buzz\", \"41\", \"Fizz\", \"43\", \"44\", \"FizzBuzz\", \"46\", \"47\", \"Fizz\", \"49\", \"Buzz\", \"Fizz\", \"52\", \"53\", \"Fizz\", \"Buzz\", \"56\", \"Fizz\", \"58\", \"59\", \"FizzBuzz\", \"61\", \"62\", \"Fizz\", \"64\", \"Buzz\", \"Fizz\", \"67\", \"68\", \"Fizz\", \"Buzz\", \"71\", \"Fizz\", \"73\", \"74\", \"FizzBuzz\", \"76\", \"77\", \"Fizz\", \"79\", \"Buzz\", \"Fizz\", \"82\", \"83\", \"Fizz\", \"Buzz\", \"86\", \"Fizz\", \"88\", \"89\", \"FizzBuzz\", \"91\", \"92\", \"Fizz\", \"94\", \"Buzz\", \"Fizz\", \"97\", \"98\", \"Fizz\", \"Buzz\", \"101\", \"Fizz\", \"103\", \"104\", \"FizzBuzz\", \"106\", \"107\", \"Fizz\", \"109\", \"Buzz\", \"Fizz\", \"112\", \"113\", \"Fizz\", \"Buzz\", \"116\", \"Fizz\", \"118\", \"119\", \"FizzBuzz\", \"121\", \"122\", \"Fizz\", \"124\", \"Buzz\", \"Fizz\", \"127\", \"128\", \"Fizz\", \"Buzz\", \"131\", \"Fizz\", \"133\", \"134\", \"FizzBuzz\", \"136\", \"137\", \"Fizz\", \"139\", \"Buzz\", \"Fizz\", \"142\", \"143\", \"Fizz\", \"Buzz\", \"146\", \"Fizz\", \"148\", \"149\", \"FizzBuzz\", \"151\"]\n];\n\nlet cnt = 0;\nfor (let i = 0; i < testCases[0].length; i++) {\n    const n = testCases[0][i];\n    const ans = fizzBuzz(n);\n\n    let isCorrect = true;\n    for (let j = 0; j < ans.length; j++) {\n        if (ans[j] !== expectedOutputs[0][j]) {\n            isCorrect = false;\n            break;\n        }\n    }\n    if (isCorrect) {\n        cnt++;\n    }\n}\n\nconsole.log(cnt);",
        "PythonSubmit":"\ntestCases = [[3, 5, 15, 7, 10, 20, 30, 50, 100, 150]]\nexpectedOutputs = [\n    [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\", \"16\", \"17\", \"Fizz\", \"19\", \"Buzz\", \"Fizz\", \"22\", \"23\", \"Fizz\", \"Buzz\", \"26\", \"Fizz\", \"28\", \"29\", \"FizzBuzz\", \"31\", \"32\", \"Fizz\", \"34\", \"Buzz\", \"Fizz\", \"37\", \"38\", \"Fizz\", \"Buzz\", \"41\", \"Fizz\", \"43\", \"44\", \"FizzBuzz\", \"46\", \"47\", \"Fizz\", \"49\", \"Buzz\", \"Fizz\", \"52\", \"53\", \"Fizz\", \"Buzz\", \"56\", \"Fizz\", \"58\", \"59\", \"FizzBuzz\", \"61\", \"62\", \"Fizz\", \"64\", \"Buzz\", \"Fizz\", \"67\", \"68\", \"Fizz\", \"Buzz\", \"71\", \"Fizz\", \"73\", \"74\", \"FizzBuzz\", \"76\", \"77\", \"Fizz\", \"79\", \"Buzz\", \"Fizz\", \"82\", \"83\", \"Fizz\", \"Buzz\", \"86\", \"Fizz\", \"88\", \"89\", \"FizzBuzz\", \"91\", \"92\", \"Fizz\", \"94\", \"Buzz\", \"Fizz\", \"97\", \"98\", \"Fizz\", \"Buzz\", \"101\", \"Fizz\", \"103\", \"104\", \"FizzBuzz\", \"106\", \"107\", \"Fizz\", \"109\", \"Buzz\", \"Fizz\", \"112\", \"113\", \"Fizz\", \"Buzz\", \"116\", \"Fizz\", \"118\", \"119\", \"FizzBuzz\", \"121\", \"122\", \"Fizz\", \"124\", \"Buzz\", \"Fizz\", \"127\", \"128\", \"Fizz\", \"Buzz\", \"131\", \"Fizz\", \"133\", \"134\", \"FizzBuzz\", \"136\", \"137\", \"Fizz\", \"139\", \"Buzz\", \"Fizz\", \"142\", \"143\", \"Fizz\", \"Buzz\", \"146\", \"Fizz\", \"148\", \"149\", \"FizzBuzz\", \"151\"]\n]\n\ncnt = 0\nfor i in range(len(testCases[0])):\n    n = testCases[0][i]\n    ans = fizzBuzz(n)\n    \n    is_correct = all(ans[j] == expectedOutputs[0][j] for j in range(len(ans)))\n    if is_correct:\n        cnt += 1\n\nprint(cnt)\n",
        "CSubmit":"",
        "CppSubmit":"int main() {\n    vector<vector<int>> testCases = {\n        {3, 5, 15, 7, 10, 20, 30, 50, 100, 150}\n    };\n\n    vector<string> expectedOutputs = \n        {\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\", \"16\", \"17\", \"Fizz\", \"19\", \"Buzz\", \"Fizz\", \"22\", \"23\", \"Fizz\", \"Buzz\", \"26\", \"Fizz\", \"28\", \"29\", \"FizzBuzz\", \"31\", \"32\", \"Fizz\", \"34\", \"Buzz\", \"Fizz\", \"37\", \"38\", \"Fizz\", \"Buzz\", \"41\", \"Fizz\", \"43\", \"44\", \"FizzBuzz\", \"46\", \"47\", \"Fizz\", \"49\", \"Buzz\", \"Fizz\", \"52\", \"53\", \"Fizz\", \"Buzz\", \"56\", \"Fizz\", \"58\", \"59\", \"FizzBuzz\", \"61\", \"62\", \"Fizz\", \"64\", \"Buzz\", \"Fizz\", \"67\", \"68\", \"Fizz\", \"Buzz\", \"71\", \"Fizz\", \"73\", \"74\", \"FizzBuzz\", \"76\", \"77\", \"Fizz\", \"79\", \"Buzz\", \"Fizz\", \"82\", \"83\", \"Fizz\", \"Buzz\", \"86\", \"Fizz\", \"88\", \"89\", \"FizzBuzz\", \"91\", \"92\", \"Fizz\", \"94\", \"Buzz\", \"Fizz\", \"97\", \"98\", \"Fizz\", \"Buzz\", \"101\", \"Fizz\", \"103\", \"104\", \"FizzBuzz\", \"106\", \"107\", \"Fizz\", \"109\", \"Buzz\", \"Fizz\", \"112\", \"113\", \"Fizz\", \"Buzz\", \"116\", \"Fizz\", \"118\", \"119\", \"FizzBuzz\", \"121\", \"122\", \"Fizz\", \"124\", \"Buzz\", \"Fizz\", \"127\", \"128\", \"Fizz\", \"Buzz\", \"131\", \"Fizz\", \"133\", \"134\", \"FizzBuzz\", \"136\", \"137\", \"Fizz\", \"139\", \"Buzz\", \"Fizz\", \"142\", \"143\", \"Fizz\", \"Buzz\", \"146\", \"Fizz\", \"148\", \"149\", \"FizzBuzz\", \"151\"};\n    int cnt = 0;\n    for (int i = 0; i < testCases[0].size(); i++) {\n        int n = testCases[0][i];\n        vector<string> ans = fizzBuzz(n);\n\n        for(int i = 0; i< ans.size() ;i++){\n            if(ans[i] != expectedOutputs[i])\n                continue;\n        }\n        cnt++;\n        \n    }\n    cout<<cnt;\n    return 0;\n}"
    },
    {
        "srno":"4",
        "title":"Richest Customer Wealth",
        "status":"Not Solved",
        "marks":"10",
        "description":"You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.\n\nA customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.Explanation:\n1st customer has wealth = 1 + 2 + 3 = 6\n2nd customer has wealth = 3 + 2 + 1 = 6\nBoth customers are considered the richest with a wealth of 6 each, so return 6.",
        "case1":"[[1,2,3],[3,2,1]]",
        "case2":"[[2,8,7],[7,1,3],[1,9,5]]",
        "expected1":"6",
        "expected2":"10",
        "InputName":"accounts = ",
        "Constraints":["m == accounts.length","n == accounts[i].length","1 <= m, n <= 50","1 <= accounts[i][j] <= 100"],
        "Cpp":"int maximumWealth(vector<vector<int>>& accounts) {\n        \n    }",
        "Java":"class Solution {\n    public int maximumWealth(int[][] accounts) {\n        \n    }\n}"   ,
        "Python":"def maximumWealth(accounts):\n",
        "C":"int maximumWealth(int** accounts, int accountsSize, int* accountsColSize){\n\n}",
        "Javascript":"var maximumWealth = function(accounts) {\n    \n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<vector<vector<int>>> val = {{{1,2,3},{3,2,1}},{{2,8,7},{7,1,3},{1,9,5}}};\n    vector<int> ans = {maximumWealth(val[0]),maximumWealth(val[1])};\n    try{\n        for(auto i:ans){\n            cout<<i<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}",
        "CMain":"int main() {\n    int numCols1[] = {3, 3};\n    int* val1[] = { (int[]){1, 2, 3}, (int[]){3, 2, 1} };\n\n    int numCols2[] = {3, 3, 3};\n    int* val2[] = { (int[]){2, 8, 7}, (int[]){7, 1, 3}, (int[]){1, 9, 5} };\n\n    int* val[] = {val1, val2};\n    int numRows = sizeof(val) / sizeof(val[0]);\n    \n    int ans[numRows];\n    for (int i = 0; i < numRows; i++) {\n        ans[i] = maximumWealth(val[i], numRows, numCols1);\n    }\n    \n    try {\n        for (int i = 0; i < numRows; i++) {\n            printf(\"%d\\n\", ans[i]);\n        }\n    } catch (...) {\n        printf(\"Error occurred\\n\");\n    }\n    return 0;\n}",
        "PythonMain":"def main():\n    val = [[[1,2,3],[3,2,1]], [[2,8,7],[7,1,3],[1,9,5]]]\n    ans = [maximum_wealth(val[0]), maximum_wealth(val[1])]\n    try:\n        for i in ans:\n            print(i)\n    except:\n        print(\"Error occurred\")\n\nif __name__ == \"__main__\":\n    main()",
        "JavascriptMain":"function main() {\n    const val = [[[1,2,3],[3,2,1]], [[2,8,7],[7,1,3],[1,9,5]]];\n    const ans = val.map(arr => maximumWealth(arr));\n    \n    try {\n        for (const i of ans) {\n            console.log(i);\n        }\n    } catch (error) {\n        console.log(\"Error occurred\");\n    }\n}\n\nmain();",
        "JavascriptSubmit":"",
        "PythonSubmit":"",
        "CSubmit":"",
        "CppSubmit":""
    },
    {
        "srno":"5",
        "title":"Length of Last Word",
        "status":"Not Solved",
        "marks":"10",
        "description":"Given a string s consisting of words and spaces, return the length of the last word in the string.\n\nA word is a maximal substring consisting of non-space characters only.",
        "case1":"'Hello World'",
        "case2":"'   fly me   to   the moon     '",
        "expected1":"5",
        "expected2":"4",
        "InputName":"s = ",
        "Constraints":["1 <= s.length <= 10^4","s consists of only English letters and spaces ' '","There will be at least one word in s"],
        "Cpp":"int lengthOfLastWord(string s) {\n        \n    }",
        "Java":"class Solution {\n    public int lengthOfLastWord(String s) {\n        \n    }\n}"   ,
        "Python":"def lengthOfLastWord(s):\n",
        "C":"int lengthOfLastWord(char * s){\n\n}",
        "Javascript":"var lengthOfLastWord = function(s) {\n    \n};","CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<string> val = {\"Hello World\",\"   fly me   to   the moon  \"};\n    vector<int> ans = {lengthOfLastWord(val[0]),lengthOfLastWord(val[1])};\n    try{\n        for(auto i:ans){\n            cout<<i<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}\n",
        "CMain":"int main() {\n    char* val[] = {\"Hello World\", \"   fly me   to   the moon  \"};\n    int ans[2];\n    for (int i = 0; i < 2; i++) {\n        ans[i] = lengthOfLastWord(val[i]);\n    }\n    \n    try {\n        for (int i = 0; i < 2; i++) {\n            printf(\"%d\\n\", ans[i]);\n        }\n    } catch (...) {\n        printf(\"Error occurred\\n\");\n    }\n    return 0;\n}",
        "PythonMain":"def main():\n    val = [\"Hello World\", \"   fly me   to   the moon  \"]\n    ans = [length_of_last_word(val[0]), length_of_last_word(val[1])]\n    try:\n        for i in ans:\n            print(i)\n    except:\n        print(\"Error occurred\")\n\nif __name__ == \"__main__\":\n    main()",
        "JavascriptMain":"function main() {\n    const val = [\"Hello World\", \"   fly me   to   the moon  \"];\n    const ans = val.map(s => lengthOfLastWord(s));\n    \n    try {\n        for (const i of ans) {\n            console.log(i);\n        }\n    } catch (error) {\n        console.log(\"Error occurred\");\n    }\n}\n\nmain();\n",
        "JavascriptSubmit":"const testCases = [\n    \"Hello World\",\n    \"   Hello World   \",\n    \"Programming is fun\",\n    \"\",\n    \"SingleWord\",\n    \"   \",\n    \"    Word\",\n    \"Word    \",\n    \"   Word   \",\n    \"Word ok\"\n];\n\nconst expectedOutputs = [5, 5, 3, 0, 10, 0, 4, 4, 4, 2];\n\nconst cnt = testCases.reduce((acc, value, index) => {\n    return lengthOfLastWord(value) === expectedOutputs[index] ? acc + 1 : acc;\n}, 0);\nconsole.log(cnt);",
        "PythonSubmit":"\ntestCases = [\n    \"Hello World\",\n    \"   Hello World   \",\n    \"Programming is fun\",\n    \"\",\n    \"SingleWord\",\n    \"   \",\n    \"    Word\",\n    \"Word    \",\n    \"   Word   \",\n    \"Word ok\"\n]\n\nexpectedOutputs = [5, 5, 3, 0, 10, 0, 4, 4, 4, 2]\n\ncnt = sum(1 for i in range(len(testCases)) if lengthOfLastWord(testCases[i]) == expectedOutputs[i])\nprint(cnt)",
        "CSubmit":"int main() {\n    char *testCases[] = {\n        \"Hello World\",\n        \"   Hello World   \",\n        \"Programming is fun\",\n        \"\",\n        \"SingleWord\",\n        \"   \",\n        \"    Word\",\n        \"Word    \",\n        \"   Word   \",\n        \"Word ok\"\n    };\n\n    int expectedOutputs[] = {5, 5, 3, 0, 10, 0, 4, 4, 4, 2};\n\n    int cnt = 0;\n    for (int i = 0; i < sizeof(testCases) / sizeof(testCases[0]); i++) {\n        int ans = lengthOfLastWord(testCases[i]);\n        if (ans == expectedOutputs[i]) {\n            cnt++;\n        }\n    }\n\n    printf(\"%d\", cnt);\n    return 0;\n}",
        "CppSubmit":"int main() {\n    vector<string> testCases = {\n        \"Hello World\",\n        \"   Hello World   \",\n        \"Programming is fun\",\n        \"\",\n        \"SingleWord\",\n        \"   \",\n        \"    Word\",\n        \"Word    \",\n        \"   Word   \",\n        \"Word ok\"\n    };\n\n    vector<int> expectedOutputs = {5, 5, 3, 0, 10, 0, 4, 4, 4, 2};\n\n    int cnt = 0;\n    for (int i = 0; i < testCases.size(); i++) {\n        int ans = lengthOfLastWord(testCases[i]);\n        if (ans == expectedOutputs[i]) {\n            cnt++;\n        }\n    }\n\n    cout << cnt;\n    return 0;\n}"
    },
    {
        "srno":"6",
        "title":"Defanging an IP Address",
        "status":"Not Solved",
        "marks":"10",
        "description":"Given a valid (IPv4) IP address, return a defanged version of that IP address.\n\nA defanged IP address replaces every period \".\" with \"[.]\".",
        "case1":"1.1.1.1",
        "case2":"255.100.50.0",
        "expected1":"1[.]1[.]1[.]1",
        "expected2":"255[.]100[.]50[.]0",
        "InputName":"address = ",
        "Constraints":["The given address is a valid IPv4 address"],
        "Cpp":"string defangIPaddr(string address) {\n        \n    }",
        "Java":"class Solution {\n    public String defangIPaddr(String address) {\n        \n    }\n}"  ,
        "Python":"def defangIPaddr(address):\n",
        "C":"char * defangIPaddr(char * address){\n\n}",
        "Javascript":"var defangIPaddr = function(address) {\n    \n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<string> val = {\"1.1.1.1\",\"255.100.50.0\"};\n    vector<string> ans = {defangIPaddr(val[0]),defangIPaddr(val[1])};\n    try{\n        for(auto i:ans){\n            cout<<i<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}\n",
        "CMain":"int main() {\n    char* val[] = {\"1.1.1.1\", \"255.100.50.0\"};\n    char* ans[2];\n    for (int i = 0; i < 2; i++) {\n        ans[i] = defangIPaddr(val[i]);\n    }\n    \n    try {\n        for (int i = 0; i < 2; i++) {\n            printf(\"%s\\n\", ans[i]);\n            free(ans[i]);\n        }\n    } catch (...) {\n        printf(\"Error occurred\\n\");\n    }\n    return 0;\n}",
        "PythonMain":"def main():\n    val = [\"1.1.1.1\", \"255.100.50.0\"]\n    ans = [defangIPaddr(val[0]), defangIPaddr(val[1])]\n    try:\n        for i in ans:\n            print(i)\n    except:\n        print(\"Error occurred\")\n\nif __name__ == \"__main__\":\n    main()",
        "JavascriptMain":"function main() {\n    const val = [\"1.1.1.1\", \"255.100.50.0\"];\n    const ans = val.map(a => defangIPaddr(a));\n    \n    try {\n        for (const i of ans) {\n            console.log(i);\n        }\n    } catch (error) {\n        console.log(\"Error occurred\");\n    }\n}\n\nmain();",
        "JavascriptSubmit":"",
        "PythonSubmit":"",
        "CSubmit":"",
        "CppSubmit":""
    },
    {
        "srno":"7",
        "title":"Find First and Last Position of Element in Sorted Array",
        "status":"Not Solved",
        "marks":"10",
        "description":"Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\n\nIf target is not found in the array, return [-1, -1].",
        "case1":"[5,7,7,8,8,10], target = 8",
        "case2":"[5,7,7,8,8,10], target = 6",
        "expected1":"[3,4]",
        "expected2":"[-1,-1]",
        "InputName":"nums = ",
        "Constraints":["0 <= nums.length <= 10^5","-10^9 <= nums[i] <= 10^9","nums is a non-decreasing array","-10^9 <= target <= 10^9"],
        "Cpp":"vector<int> searchRange(vector<int>& nums, int target) {\n        \n    }",
        "Java":"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}"  ,
        "Python":"def searchRange(nums, target):\n",
        "C":"int* searchRange(int* nums, int numsSize, int target, int* returnSize){\n\n}",
        "Javascript":"var searchRange = function(nums, target) {\n    \n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<vector<int>> val = {{5,7,7,8,8,10},{5,7,7,8,8,10}};\n    vector<vector<int>> ans = {searchRange(val[0],8),searchRange(val[1],6)};\n    try{\n        for(auto i:ans){\n            string out = \"[\";\n            for(auto j:i){\n                out += to_string(j) + \",\";\n            }\n            out.pop_back();\n            out += ']';\n            cout<<out<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}",
        "CMain":"int main() {\n    int val[2][2][6] = {{{5,7,7,8,8,10},{5,7,7,8,8,10}}};\n    int returnSize;\n    int *ans1 = searchRange(val[0][0], 6, 8, &returnSize);\n    int *ans2 = searchRange(val[0][1], 6, 6, &returnSize);\n        printf(\"[\");\n        for (int i = 0; i < returnSize; i++) {\n            printf(\"%d%c\", ans1[i], (i == returnSize - 1) ? ']' : ',');\n        }\n        printf(\"\\n[\");\n        for (int i = 0; i < returnSize; i++) {\n            printf(\"%d%c\", ans2[i], (i == returnSize - 1) ? ']' : ',');\n        }\n    free(ans1);\n    free(ans2);\n\n    return 0;\n}",
        "PythonMain":"\nval = [[5,7,7,8,8,10], [5,7,7,8,8,10]]\nans = [searchRange(val[0], 8), searchRange(val[1], 6)]\n\ntry:\n    for i in ans:\n        ans_str = \"[\"\n        for j in i:\n            ans_str += str(j) + \",\"\n        ans_str = ans_str[:-1] + \"]\"\n        print(ans_str)\nexcept:\n    print(\"error occur\")",
        "JavascriptMain":"const val = [[5,7,7,8,8,10], [5,7,7,8,8,10]];\nconst ans = [searchRange(val[0], 8), searchRange(val[1], 6)];\n\ntry {\n    for (const i of ans) {\n        let ans_str = \"[\";\n        for (const j of i) {\n            ans_str += j + \",\";\n        }\n        ans_str = ans_str.slice(0, -1) + \"]\";\n        console.log(ans_str);\n    }\n} catch {\n    console.log(\"error occur\");\n}",
        "JavascriptSubmit":"",
        "PythonSubmit":"",
        "CSubmit":"",
        "CppSubmit":""
    },
    {
        "srno":"8",
        "title":"Count Primes",
        "status":"Not Solved",
        "marks":"10",
        "description":"Given an integer n, return the number of prime numbers that are strictly less than n.",
        "case1":"10",
        "case2":"1",
        "expected1":"4",
        "expected2":"0",
        "InputName":"n = ",
        "Constraints":["0 <= n <= 5 * 10^6"],
        "Cpp":"int countPrimes(int n) {\n        \n    }",
        "Java":"class Solution {\n    public int countPrimes(int n) {\n        \n    }\n}"  ,
        "Python":"def countPrimes(n):\n",
        "C":"int countPrimes(int n){\n\n}",
        "Javascript":"var countPrimes = function(n) {\n    \n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<int> ans = {countPrimes(10),countPrimes(1)};\n    try{\n        for(auto i:ans){\n            cout<<i<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}",
        "CMain":"int main() {\n    int ans[] = {countPrimes(10), countPrimes(1)};\n   for (int i = 0; i < sizeof(ans) / sizeof(ans[0]); i++) {\n            printf(\"%d\\n\", ans[i]);\n        }\n       printf(\"Error occurred\\n\");\n       return 0;\n}",
        "PythonMain":"\ndef main():\n    ans = [count_primes(10), count_primes(1)]\n    try:\n        for i in ans:\n            print(i)\n    except:\n        print(\"Error occurred\")\n\nif __name__ == \"__main__\":\n    main()",
        "JavascriptMain":"function main() {\n    const ans = [countPrimes(10), countPrimes(1)];\n    try {\n        for (const i of ans) {\n            console.log(i);\n        }\n    } catch (error) {\n        console.log(\"Error occurred\");\n    }\n}\n\nmain();",
        "JavascriptSubmit":"const testCases = [10, 20, 30, 50, 100, 150, 200, 250, 300, 500];\nconst expectedOutputs = [4, 8, 10, 15, 25, 35, 46, 53, 62, 95];\n\nconst cnt = testCases.reduce((acc, value, index) => {\n    return countPrimes(value) === expectedOutputs[index] ? acc + 1 : acc;\n}, 0);\nconsole.log(cnt);",
        "PythonSubmit":"\ntestCases = [10, 20, 30, 50, 100, 150, 200, 250, 300, 500]\nexpectedOutputs = [4, 8, 10, 15, 25, 35, 46, 53, 62, 95]\n\ncnt = sum(1 for i in range(len(testCases)) if countPrimes(testCases[i]) == expectedOutputs[i])\nprint(cnt)",
        "CSubmit":"int main() {\n    int testCases[] = {10, 20, 30, 50, 100, 150, 200, 250, 300, 500};\n    int expectedOutputs[] = {4, 8, 10, 15, 25, 35, 46, 53, 62, 95};\n    \n    int cnt = 0;\n    for (int i = 0; i < sizeof(testCases) / sizeof(testCases[0]); i++) {\n        int ans = countPrimes(testCases[i]);\n        if (ans == expectedOutputs[i]) {\n            cnt++;\n        }\n    }\n\n    printf(\"%d\", cnt);\n    return 0;\n}\n",
        "CppSubmit":"int main() {\n    vector<int> testCases = {10, 20, 30, 50, 100, 150, 200, 250, 300, 500};\n    vector<int> expectedOutputs = {4, 8, 10, 15, 25, 35, 46, 53, 62, 95};\n    \n    int cnt = 0;\n    for (int i = 0; i < testCases.size(); i++) {\n        int ans = countPrimes(testCases[i]);\n        cout<<ans<<endl;\n        if (ans == expectedOutputs[i]) {\n            cnt++;\n        }\n    }\n\n    cout << cnt;\n    return 0;\n}"
    },
    {
        "srno":"9",
        "title":"Replace character",
        "status":"Not Solved",
        "marks":"10",
        "description":"Given an input string S and two characters c1 and c2, you need to replace every occurrence of character c1 with character c2 in the given string.",
        "case1":"'abacd'   ,   c1 = 'a' , c2 = 'x'",
        "case2":"'hitesh'   ,  c1 = 'h' , c2 = 'H'",
        "expected1":"xbxcd",
        "expected2":"HitesH",
        "InputName":"word = ",
        "Constraints":["1 <= Length of String S <= 10^6"],
        "Cpp":"string replaceCharacter(string input, char c1, char c2) {\n    // Write your code here\n}",
        "Java":"class Solution {\n    public int[] getConcatenation(int[] nums,int n) {\n        \n     }\n}"   ,
        "Python":"def replaceCharacter(input_str,c1,c2):\n",
        "C":"char* replaceCharacter(char input[], char c1, char c2){\n    \n}",
        "Javascript":"const replaceCharacter = (input,c1,c2) =>{\n    \n}",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n#include<malloc.h>\n",
        "CppMain":"int main(){\n    vector<string> val = {\"abacd\",\"hitesh\"};\n    vector<string> ans = {replaceCharacter(val[0],'a','x'),replaceCharacter(val[1],'h','H')};\n    try{\n        for(auto i:ans){\n            cout<<i<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}",
        "CMain":"int main() {\n    const char* val[2] = {\"abacd\", \"hitesh\"};\n    char* ans1 = replaceCharacter(val[0], 'a', 'x');\n    char* ans2 = replaceCharacter(val[1], 'h', 'H');\n\n        printf(\"%s\\n\", ans1);\n        printf(\"%s\\n\", ans2);\n\n    free(ans1);\n    free(ans2);\n\n    return 0;\n}\n",
        "PythonMain":"\nval = [\"abacd\", \"hitesh\"]\nans = [replaceCharacter(val[0], 'a', 'x'), replaceCharacter(val[1], 'h', 'H')]\n\ntry:\n    for i in ans:\n        print(i)\nexcept:\n    print(\"error occur\")",
        "JavascriptMain":"const val = [\"abacd\", \"hitesh\"];\nconst ans = [replaceCharacter(val[0], 'a', 'x'), replaceCharacter(val[1], 'h', 'H')];\n\ntry {\n    for (const i of ans) {\n        console.log(i);\n    }\n} catch {\n    console.log(\"error occur\");\n}",
        "JavascriptSubmit":"const testCases = [\"abacd\", \"hitesh\", \"hello\", \"programming\", \"apple\", \"banana\", \"cucumber\", \"elephant\", \"car\", \"dog\"];\nconst expectedOutputs = [\"xbxcd\", \"hitesh\", \"hello\", \"progrxmming\", \"xpple\", \"bxnxnx\", \"cucumber\", \"elephxnt\", \"cxr\", \"dog\"];\n\nconst cnt = testCases.reduce((acc, value, index) => {\n    return replaceCharacter(value, 'a', 'x') === expectedOutputs[index] ? acc + 1 : acc;\n}, 0);\nconsole.log(cnt);",
        "PythonSubmit":"\ntestCases = [\"abacd\", \"hitesh\", \"hello\", \"programming\", \"apple\", \"banana\", \"cucumber\", \"elephant\", \"car\", \"dog\"]\nexpectedOutputs = [\"xbxcd\", \"hitesh\", \"hello\", \"progrxmming\", \"xpple\", \"bxnxnx\", \"cucumber\", \"elephxnt\", \"cxr\", \"dog\"]\n\ncnt = sum(1 for i in range(len(testCases)) if replaceCharacter(testCases[i], 'a', 'x') == expectedOutputs[i])\nprint(cnt)",
        "CSubmit":"int main() {\n    char* testCases[] = {\"abacd\", \"hitesh\", \"hello\", \"programming\", \"apple\", \"banana\", \"cucumber\", \"elephant\", \"car\", \"dog\"};\n    char* expectedOutputs[] = {\"xbxcd\", \"hitesh\", \"hello\", \"progrxmming\", \"xpple\", \"bxnxnx\", \"cucumber\", \"elephxnt\", \"cxr\", \"dog\"};\n\n    int cnt = 0;\n    for (int i = 0; i < sizeof(testCases) / sizeof(testCases[0]); i++) {\n        char* ans = replaceCharacter(testCases[i], 'a', 'x');\n        if (strcmp(ans, expectedOutputs[i]) == 0) {\n            cnt++;\n        }\n    }\n\n    printf(\"%d\", cnt);\n    return 0;\n}",
        "CppSubmit":"int main() {\n    vector<string> testCases = {\"abacd\", \"hitesh\", \"hello\", \"programming\", \"apple\", \"banana\", \"cucumber\", \"elephant\", \"car\", \"dog\"};\n    vector<string> expectedOutputs = {\"xbxcd\", \"hitesh\", \"hello\", \"progrxmming\", \"xpple\", \"bxnxnx\", \"cucumber\", \"elephxnt\", \"cxr\", \"dog\"};\n\n    int cnt = 0;\n    for (int i = 0; i < testCases.size(); i++) {\n        string ans = replaceCharacter(testCases[i], 'a', 'x');\n        if (ans == expectedOutputs[i]) {\n            cnt++;\n        }\n    }\n\n    cout << cnt;\n    return 0;\n}\n"
    },
    {
        "srno":"10",
        "title":"Intersection Of Two Sorted Arrays",
        "status":"Not Solved",
        "marks":"10",
        "description":"Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.",
        "case1":"[1,2,2,2,3,4] , nums2 = [2,2,3,3]",
        "case2":"[1,4,5] , nums2 = [3,4,5]",
        "expected1":"[2,3]",
        "expected2":"[4,5]",
        "InputName":"nums1 = ",
        "Constraints":["1 <= nums1.length, nums2.length <= 1000","0 <= nums1[i], nums2[i] <= 1000"],
        "Cpp":"vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        \n    }",
        "Java":"class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        \n    }\n}"   ,
        "Python":"def intersection(nums1, nums2):\n",
        "C":"int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\n\n}",
        "Javascript":"var intersection = function(nums1, nums2) {\n    \n};",
        "CppHeader":"#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<cmath>\nusing namespace std;",
        "CHeader":"#include<stdio.h>\n#include<math.h>\n#include<string.h>\n#include <stdlib.h>\n",
        "CppMain":"int main(){\n    vector<vector<vector<int>>> val = {{{1,2,2,2,3,4},{2,2,3,3}},{{1,4,5},{3,4,5}}};\n    vector<vector<int>> ans = {intersection(val[0][0],val[0][1]),intersection(val[1][0],val[1][1])};\n    try{\n        for(auto i:ans){\n            string ans = \"[\";\n            for(auto j:i){\n                ans += to_string(j) + \",\";\n            }\n            ans.pop_back();\n            ans += \"]\";\n            cout<<ans<<endl;\n        }\n    }catch(...){\n        cout<<\"error occur\"<<endl;\n    }\n}",
        "CMain":"int main() {\n    int val[2][2][6] = {{{1,2,2,2,3,4},{2,2,3,3}},{{1,4,5},{3,4,5}}};\n    int returnSize;\n    int *ans1 = intersection(val[0][0], 6, val[0][1], 4, &returnSize);\n    int *ans2 = intersection(val[1][0], 3, val[1][1], 3, &returnSize);\n\n    try {\n        for (int i = 0; i < returnSize; i++) {\n            printf(\"%d%c\", ans1[i], (i == returnSize - 1) ? '\\n' : ',');\n        }\n\n        for (int i = 0; i < returnSize; i++) {\n            printf(\"%d%c\", ans2[i], (i == returnSize - 1) ? '\\n' : ',');\n        }\n    } catch(...) {\n        printf(\"error occur\\n\");\n    }\n\n    free(ans1);\n    free(ans2);\n\n    return 0;\n}",
        "PythonMain":"\nval = [[[1,2,2,2,3,4],[2,2,3,3]], [[1,4,5],[3,4,5]]]\nans = [intersection(val[0][0],val[0][1]), intersection(val[1][0],val[1][1])]\n\ntry:\n    for i in ans:\n        ans_str = \"[\"\n        for j in i:\n            ans_str += str(j) + \",\"\n        ans_str = ans_str[:-1] + \"]\"\n        print(ans_str)\nexcept:\n    print(\"error occur\")",
        "JavascriptMain":"const val = [[[1,2,2,2,3,4],[2,2,3,3]], [[1,4,5],[3,4,5]]];\nconst ans = [intersection(val[0][0],val[0][1]), intersection(val[1][0],val[1][1])];\n\ntry {\n    for (const i of ans) {\n        let ans_str = \"[\";\n        for (const j of i) {\n            ans_str += j + \",\";\n        }\n        ans_str = ans_str.slice(0, -1) + \"]\";\n        console.log(ans_str);\n    }\n} catch {\n    console.log(\"error occur\");\n}",
        "JavascriptSubmit":"",
        "PythonSubmit":"",
        "CSubmit":"",
        "CppSubmit":""
    }
]